extends layout
block content
  -
    function formatDate(date) {
      var monthNames = [
        "January", "February", "March",
        "April", "May", "June", "July",
        "August", "September", "October",
        "November", "December"
      ];

      var day = date.getDate();
      var monthIndex = date.getMonth();
      var year = date.getFullYear();
      var hours = date.getHours();
      var minutes = "" + date.getMinutes();
      if (minutes.length<2)
        minutes = "0"+minutes;

      return day + ' ' + monthNames[monthIndex] + ' ' + year + ' - ' + hours + ':' + minutes;
    }
    function hexToRgb(hex) {
      // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
      var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
      hex = hex.replace(shorthandRegex, function(m, r, g, b) {
        return r + r + g + g + b + b;
      });

      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : null;
    }
    function RGBtoHSV(r, g, b) {
      if (arguments.length === 1) {
        g = r.g, b = r.b, r = r.r;
      }
      var max = Math.max(r, g, b), min = Math.min(r, g, b),
        d = max - min,
        h,
        s = (max === 0 ? 0 : d / max),
        v = max / 255;

      switch (max) {
        case min: h = 0; break;
        case r: h = (g - b) + d * (g < b ? 6: 0); h /= 6 * d; break;
        case g: h = (b - r) + d * 2; h /= 6 * d; break;
        case b: h = (r - g) + d * 4; h /= 6 * d; break;
      }

      return {
        h: h,
        s: s,
        v: v
      };
    }
    function isDark(hex){
      var rgb = hexToRgb(hex);
      var hsv = RGBtoHSV(rgb.r, rgb.g, rgb.b);
      console.log("I think "+hex+", with a value of "+hsv.v+" is "+(hsv.v<0.5?"dark":"light"));
      return hsv.v<0.5;
    }
    function tc(hex){
      return isDark(hex) ? "#333333" : "#F7F7F7"
    }
    function bc(hex) {
      return isDark(hex) ? "#F7F7F7" : "#333333"
    }
    Object.prototype.isThing = function(key){
      if (!this.hasOwnProperty(key)){
        return false;
      } else {
        if (this[key])
          return true;
        else
          return false;
      }
    }
  .rotonde(
    style = "outline-color: "+profile.color+"; color: "+tc(profile.color)+"; background-color: "+bc(profile.color)+"; "
    )
    .profile
      img(src = profile.avatar).avatar
      .deets
        p= profile.name
        if profile.location
          if profile.position
            -
              profile.position = profile.position.replace(" ","");
              pos = profile.position.split(",");
            a.link(href = "https://www.openstreetmap.org/?mlat="+pos[0]+"&mlon="+pos[1]+"#map=6/"+pos[0]+"/"+pos[1] style="color: "+profile.color+";") 🌍:#{profile.location}→
          else
            p.link(style="color: "+profile.color+";") 🌍:#{profile.location}
    .feed-container
      .col
        .title
          hr(noshade).line
          h home
          hr(noshade).line
        each entry in feed
          .post(style = "border-color: "+profile.color+";")
            if entry.hasOwnProperty("media")
              a(href=entry.media)
                img.media(src=entry.media)
            p.text= entry.text
              |  
              if entry.hasOwnProperty("url")
                a.link(href = entry.url style="color: "+profile.color+";")= "→"
            if entry.hasOwnProperty("time")
              p.date= formatDate(new Date(parseInt(entry.time * 1000)))
      .col
        .title
          hr(noshade).line
          h portal
          hr(noshade).line
        each entry in portalFeed
          .post(
            style = "outline-color: "+entry.profile.color+"; color: "+tc(entry.profile.color)+"; background-color: "+bc(entry.profile.color)+"; "
            )
            if entry.post.hasOwnProperty("media")
              a(href=entry.post.media style="background-color: "+entry.profile.color+";")
                img.media(src=entry.post.media style="background-color: "+entry.profile.color+";")
            img.feedavatar(src = entry.profile.avatar)
            .postcontent
              p.text.feedtext= entry.post.text
                |  
                if entry.post.hasOwnProperty("url")
                  a.link(href = entry.post.url style="color: "+entry.profile.color+";")= "→"
              p.date
                |Posted 
                if entry.post.hasOwnProperty("time")
                  | #{formatDate(new Date(parseInt(entry.post.time * 1000)))}
                |  by 
                a.link(href = "/"+entry.url.replace("http://","") style="color: "+entry.profile.color+";")= entry.profile.name
                | 
                a.link(href = entry.url style="color: grey;") .json
                    
