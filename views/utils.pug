-
  function formatDate(date) {
    var monthNames = [
      "January", "February", "March",
      "April", "May", "June", "July",
      "August", "September", "October",
      "November", "December"
    ];

    var day = date.getDate();
    var monthIndex = date.getMonth();
    var year = date.getFullYear();
    var hours = date.getHours();
    var minutes = "" + date.getMinutes();
    var seconds = "" + date.getSeconds();
    if (minutes.length<2)
      minutes = "0"+minutes;
    if (seconds.length<2)
      seconds = "0"+seconds;

    return day + ' ' + monthNames[monthIndex] + ' ' + year + ' - ' + hours + ':' + minutes + ":" + seconds;
  }
  function hexToRgb(hex) {
    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function(m, r, g, b) {
      return r + r + g + g + b + b;
    });

    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : null;
  }
  function RGBtoHSV(r, g, b) {
    if (arguments.length === 1) {
      g = r.g, b = r.b, r = r.r;
    }
    var max = Math.max(r, g, b), min = Math.min(r, g, b),
      d = max - min,
      h,
      s = (max === 0 ? 0 : d / max),
      v = max / 255;

    switch (max) {
      case min: h = 0; break;
      case r: h = (g - b) + d * (g < b ? 6: 0); h /= 6 * d; break;
      case g: h = (b - r) + d * 2; h /= 6 * d; break;
      case b: h = (r - g) + d * 4; h /= 6 * d; break;
    }

    return {
      h: h,
      s: s,
      v: v
    };
  }
  function isDark(hex){
    var rgb = hexToRgb(hex);
    var hsv = RGBtoHSV(rgb.r, rgb.g, rgb.b);
    return hsv.v<0.5;
  }
  function tc(hex){
    return isDark(hex) ? "#333333" : "#F7F7F7"
  }
  function bc(hex) {
    return isDark(hex) ? "#F7F7F7" : "#333333"
  }
  Object.prototype.isThing = function(key){
    if (!this.hasOwnProperty(key)){
      return false;
    } else {
      if (this[key])
        return true;
      else
        return false;
    }
  }
  function getOption(meta, option) {
    if (meta && meta.options) {
      var o = meta.options.filter(function(elem){
        return elem.id.indexOf(option)>=0;
      })[0];
      return o;
    }
    return false;
  }